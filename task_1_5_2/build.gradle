plugins {
    id 'java'
    id 'jacoco'
    id 'application'
}

group 'ru.nsu.fit.tretyakov'
version 'unspecified'

application {
    mainClass = "ru.nsu.fit.tretyakov.MyNotebook"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains:annotations:20.1.0'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.2' // GSON
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.3' // Jackson
    implementation 'info.picocli:picocli:4.7.0' // picocli
    testImplementation group: 'junit', name: 'junit', version: '4.4' // assertions
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.1' // parametrized test
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.23.1' // assertJ
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    annotationProcessor 'info.picocli:picocli-codegen:4.7.0'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

task customFatJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes 'Main-Class': 'ru.nsu.fit.tretyakov.Main'
    }
    archiveBaseName = "DemoFat"
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}